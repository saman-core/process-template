package ${template.getPackageNameFormatted()}.${template.getProductNameFormattedLowerCase()}.${template.getNameFormattedLowerCase()}.repository.reactive.panache;

import io.samancore.common.error.message.TechnicalExceptionsEnum;
import io.samancore.common.error.util.ExceptionHandler;

import ${template.getPackageNameFormatted()}.${template.getProductNameFormattedLowerCase()}.${template.getNameFormattedLowerCase()}.repository.${template.getNameFormatted()}Repository;
import ${template.getPackageNameFormatted()}.${template.getProductNameFormattedLowerCase()}.${template.getNameFormattedLowerCase()}.entity.${template.getNameFormatted()}Entity;
import io.smallrye.mutiny.Uni;
import io.quarkus.hibernate.reactive.panache.PanacheRepositoryBase;
import ${template.getPackageNameFormatted()}.${template.getProductNameFormattedLowerCase()}.${template.getNameFormattedLowerCase()}.transformer.${template.getNameFormatted()}Transformer;
#if($template.evaluateIfAnyFieldIsMultiple())
import org.hibernate.reactive.mutiny.Mutiny;
#end
import jakarta.inject.Inject;
import org.jboss.logging.Logger;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.ws.rs.NotFoundException;

@ApplicationScoped
public class ${template.getNameFormatted()}RepositoryReactivePanache implements PanacheRepositoryBase<${template.getNameFormatted()}Entity, Long>, ${template.getNameFormatted()}Repository {

    @Inject
    ${template.getNameFormatted()}Transformer transformer;

    @Inject
    Logger log;

    @Override
    public Uni<${template.getNameFormatted()}Entity> create(${template.getNameFormatted()}Entity entity) {
        entity.setId(null);
        return persistAndFlush(entity)
        .onFailure().transform(e -> ExceptionHandler.throwNotFoundOrLocal(TechnicalExceptionsEnum.REPOSITORY_ERROR,e));
    }

    @Override
    public Uni<${template.getNameFormatted()}Entity> getById(Long id) {
        log.debugf("${template.getNameFormatted()}RepositoryReactivePanache.getById %d ", id);
        return findById(id)
        #if($template.evaluateIfAnyFieldIsMultiple())
            ${template.getFetchFromFieldIsCollection()}
        #end
        .onFailure().transform(e -> ExceptionHandler.throwNotFoundOrLocal(TechnicalExceptionsEnum.REPOSITORY_ERROR,e))
        .onItem().ifNull().failWith(NotFoundException::new);
    }

    @Override
    public Uni<${template.getNameFormatted()}Entity> update(${template.getNameFormatted()}Entity entity) {
        return getById(entity.getId())
        .onItem().transform(attached -> transformer.copyToAttached(entity, attached))
        .onItem().transformToUni(this::persistAndFlush)
        .onFailure().transform(e -> ExceptionHandler.throwNotFoundOrLocal(TechnicalExceptionsEnum.REPOSITORY_ERROR,e));
    }

    @Override
    public Uni<Boolean> delete(Long id) {
        return deleteById(id)
        .onItem().call(this::flush)
        .onFailure().transform(e -> ExceptionHandler.throwNotFoundOrLocal(TechnicalExceptionsEnum.REPOSITORY_ERROR,e));
    }
}