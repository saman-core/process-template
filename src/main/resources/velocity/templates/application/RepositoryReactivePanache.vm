#set ($nameTemplate = ${this.mangleTypeIdentifier($template.getName())})
#set ($nameProduct = ${this.mangleTypeIdentifier($template.getProductName())})
#set ($nameTemplateLowerCase = ${this.toLowerCase($nameTemplate)})
#set ($nameProductLowerCase = ${this.toLowerCase($nameProduct)})
package ${this.mangle($template.getPackageName())}.${nameProductLowerCase}.${nameTemplateLowerCase}.repository.reactive.panache;

import io.samancore.common.error.message.TechnicalExceptionsEnum;
import io.samancore.common.error.util.ExceptionHandler;

import ${this.mangle($template.getPackageName())}.${nameProductLowerCase}.${nameTemplateLowerCase}.repository.${nameTemplate}Repository;
import ${this.mangle($template.getPackageName())}.${nameProductLowerCase}.${nameTemplateLowerCase}.entity.${nameTemplate}Entity;
import io.smallrye.mutiny.Uni;
import io.quarkus.hibernate.reactive.panache.PanacheRepositoryBase;
import ${this.mangle($template.getPackageName())}.${nameProductLowerCase}.${nameTemplateLowerCase}.transformer.${nameTemplate}Transformer;
#if($this.validateIfAnyElementIsCollection($template.getFields()))
import org.hibernate.reactive.mutiny.Mutiny;
#end
import jakarta.inject.Inject;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.ws.rs.NotFoundException;

@ApplicationScoped
public class ${nameTemplate}RepositoryReactivePanache implements PanacheRepositoryBase<${nameTemplate}Entity, Long>, ${nameTemplate}Repository {

    @Inject
    ${nameTemplate}Transformer transformer;

    @Override
    public Uni<${nameTemplate}Entity> create(${nameTemplate}Entity entity) {
        entity.setId(null);
        return persistAndFlush(entity)
        .onFailure().transform(e -> ExceptionHandler.throwNotFoundOrLocal(TechnicalExceptionsEnum.REPOSITORY_ERROR,e));
    }

    @Override
    public Uni<${nameTemplate}Entity> getById(Long id) {
        return findById(id)
        #if($this.validateIfAnyElementIsCollection($template.getFields()))
            ${this.getFetchFromFieldIsCollection($template.getFields())}
        #end
        .onFailure().transform(e -> ExceptionHandler.throwNotFoundOrLocal(TechnicalExceptionsEnum.REPOSITORY_ERROR,e))
        .onItem().ifNull().failWith(NotFoundException::new);
    }

    @Override
    public Uni<${nameTemplate}Entity> update(${nameTemplate}Entity entity) {
        return getById(entity.getId())
        .onItem().transform(attached -> transformer.copyToAttached(entity, attached))
        .onItem().transformToUni(this::persistAndFlush)
        .onFailure().transform(e -> ExceptionHandler.throwNotFoundOrLocal(TechnicalExceptionsEnum.REPOSITORY_ERROR,e));
    }

    @Override
    public Uni<Boolean> delete(Long id) {
        return deleteById(id)
        .onItem().call(this::flush)
        .onFailure().transform(e -> ExceptionHandler.throwNotFoundOrLocal(TechnicalExceptionsEnum.REPOSITORY_ERROR,e));
    }
}