#set ($nameTemplate = ${this.mangleTypeIdentifier($template.getName())})
#set ($nameProduct = ${this.mangleTypeIdentifier($template.getProductName())})
#set ($nameTemplateLowerCase = ${this.toLowerCase($nameTemplate)})
#set ($nameProductLowerCase = ${this.toLowerCase($nameProduct)})
package ${this.mangle($template.getPackageName())}.${nameProductLowerCase}.${nameTemplateLowerCase}.transformer;

import org.jboss.logging.Logger;
import io.samancore.common.transformer.GenericTransformer;
import io.samancore.common.error.message.TechnicalExceptionsEnum;
import ${this.mangle($template.getPackageName())}.${nameProductLowerCase}.${nameTemplateLowerCase}.entity.${nameTemplate}Entity;
import ${this.mangle($template.getPackageName())}.${nameProductLowerCase}.${nameTemplateLowerCase}.model.${nameTemplate}Model;
#if($this.getIfAnyFieldNeedPair($template.getFields()))
import org.apache.commons.lang3.tuple.Pair;
import java.util.List;
import java.util.function.Function;
import java.util.Arrays;
import java.util.stream.Collectors;
#end
import io.samancore.common.error.util.ExceptionHandler;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;

@ApplicationScoped
public class  ${nameTemplate}Transformer extends GenericTransformer<${nameTemplate}Entity, ${nameTemplate}Model> {

    @Inject
    Logger log;

    public ${nameTemplate}Entity toEntity(${nameTemplate}Model model) {
        try {
            log.debugf("${nameTemplate}Transformer.toEntity model: %s", model);
            #foreach ($field in $template.getFields())
            #if($this.getTranformerPairToEntityDefinition($field))
            $this.getTranformerPairToEntityDefinition($field);
            #end
            #end
            $this.getTranformerToEntityDefinition($template.getFields());
        } catch (Exception e) {
            log.error(e.getMessage(), e);
            throw ExceptionHandler.throwNotFoundOrLocal(TechnicalExceptionsEnum.TRANSFORMER_OBJECT_ERROR, e);
        }
    }

    public ${nameTemplate}Model toModel(${nameTemplate}Entity entity) {
        try {
            log.debugf("${nameTemplate}Transformer.toModel entity: %s", entity);
            #foreach ($field in $template.getFields())
            #if($this.getTranformerPairToEntityDefinition($field))
            $this.getTranformerPairToModelDefinition($field);
            #end
            #end
            $this.getTranformerToModelDefinition($template.getFields());
        } catch (Exception e) {
        log.error(e.getMessage(), e);
        throw ExceptionHandler.throwNotFoundOrLocal(TechnicalExceptionsEnum.TRANSFORMER_OBJECT_ERROR, e);
        }
    }

    public ${nameTemplate}Entity copyToAttached(${nameTemplate}Entity detached, ${nameTemplate}Entity attached) {
        try {
            log.debugf("${nameTemplate}Transformer.copyToAttached");
            return transformCopyToAttached(detached, attached);
        } catch (Exception e) {
            log.error(e.getMessage(), e);
            throw ExceptionHandler.throwNotFoundOrLocal(TechnicalExceptionsEnum.TRANSFORMER_OBJECT_ERROR, e);
        }
    }
}