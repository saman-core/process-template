package ${template.getPackageNameFormatted()}.${template.getProductNameFormattedLowerCase()}.${template.getNameFormattedLowerCase()}.service.impl;

import ${template.getPackageName()}.${template.getProductNameFormattedLowerCase()}.${template.getNameFormattedLowerCase()}.model.${template.getNameFormatted()}Model;
import ${template.getPackageName()}.${template.getProductNameFormattedLowerCase()}.${template.getNameFormattedLowerCase()}.repository.${template.getNameFormatted()}Repository;
import ${template.getPackageName()}.${template.getProductNameFormattedLowerCase()}.${template.getNameFormattedLowerCase()}.service.${template.getNameFormatted()}Service;
import ${template.getPackageName()}.${template.getProductNameFormattedLowerCase()}.${template.getNameFormattedLowerCase()}.transformer.${template.getNameFormatted()}Transformer;
import io.smallrye.mutiny.Uni;
import io.quarkus.hibernate.reactive.panache.common.WithSession;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.jboss.logging.Logger;

@ApplicationScoped
public class ${template.getNameFormatted()}ServiceImpl implements ${template.getNameFormatted()}Service {

    @Inject
    ${template.getNameFormatted()}Repository repository;

    @Inject
    ${template.getNameFormatted()}Transformer transformer;

    @Inject
    Logger log;


    @WithSession
    @Override
    public Uni<${template.getNameFormatted()}Model> getById(Long id) {
        log.debugf("${template.getNameFormatted()}RepositoryReactivePanache.getById %d ", id);
        return repository.getById(id)
        .onItem().transform(entity -> transformer.toModel(entity));
    }

    @WithSession
    @Override
    public Uni<${template.getNameFormatted()}Model> create(${template.getNameFormatted()}Model model) {
        return repository.create(transformer.toEntity(model))
        .onItem().transform(entity -> transformer.toModel(entity));
    }

    @WithSession
    @Override
    public Uni<${template.getNameFormatted()}Model> update(${template.getNameFormatted()}Model model) {
        return repository.update(transformer.toEntity(model))
        .onItem().transform(entity -> transformer.toModel(entity));
    }

    @WithSession
    @Override
    public Uni<Boolean> deleteById(Long id) {
        return repository.delete(id);
    }
}