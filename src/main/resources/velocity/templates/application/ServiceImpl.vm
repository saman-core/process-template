#set ($nameTemplate = ${this.mangleTypeIdentifier($template.getName())})
#set ($nameProduct = ${this.mangleTypeIdentifier($template.getProductName())})
#set ($nameProductTemplate = ${nameProduct}+${nameTemplate})
#set ($nameTemplateLowerCase = ${this.toLowerCase($nameTemplate)})
#set ($nameProductLowerCase = ${this.toLowerCase($nameProduct)})
#set ($nameProductTemplateLowerCase = ${nameProductLowerCase}+${nameTemplateLowerCase})
package ${this.mangle($template.getPackageName())}.${nameProductLowerCase}.${nameTemplateLowerCase}.service.impl;

import ${template.getPackageName()}.${nameProductLowerCase}.${nameTemplateLowerCase}.model.${nameProductTemplate}Model;
import ${template.getPackageName()}.${nameProductLowerCase}.${nameTemplateLowerCase}.repository.${nameProductTemplate}Repository;
import ${template.getPackageName()}.${nameProductLowerCase}.${nameTemplateLowerCase}.service.${nameProductTemplate}Service;
import ${template.getPackageName()}.${nameProductLowerCase}.${nameTemplateLowerCase}.transformer.${nameProductTemplate}Transformer;
import io.smallrye.mutiny.Uni;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;

@ApplicationScoped
public class ${nameProductTemplate}ServiceImpl implements ${nameProductTemplate}Service {

    @Inject
    ${nameProductTemplate}Repository repository;

    @Inject
    ${nameProductTemplate}Transformer transformer;

    @Override
    public Uni<${nameProductTemplate}Model> getById(Long id) {
        return repository.getById(id)
        .onItem().transform(entity -> transformer.toModel(entity));
    }

    @Override
    public Uni<${nameProductTemplate}Model> create(${nameProductTemplate}Model model) {
        return repository.create(transformer.toEntity(model))
        .onItem().transform(entity -> transformer.toModel(entity));
    }

    @Override
    public Uni<${nameProductTemplate}Model> update(${nameProductTemplate}Model model) {
        return repository.update(transformer.toEntity(model))
        .onItem().transform(entity -> transformer.toModel(entity));
    }

    @Override
    public Uni<Boolean> deleteById(Long id) {
        return repository.delete(id);
    }
}